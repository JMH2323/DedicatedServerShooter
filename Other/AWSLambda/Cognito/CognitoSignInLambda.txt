import { CognitoIdentityProviderClient, GetUserCommand, InitiateAuthCommand } from "@aws-sdk/client-cognito-identity-provider";

export const handler = async (event) => {
  const cognitoIdentityProviderClient = new CognitoIdentityProviderClient( { region: process.env.REGION } );

  const { username, password, refreshToken } = event;

  if (refreshToken){
    const refreshTokensInput = {
      AuthFlow: "REFRESH_TOKEN_AUTH",
      ClientId: process.env.CLIENT_ID,
      AuthParameters: {
        REFRESH_TOKEN: refreshToken
      }
    };
    
    const initiateAuthCommand = new InitiateAuthCommand(refreshTokensInput);
    try {
      const initiateAuthResponse = await cognitoIdentityProviderClient.send(initiateAuthCommand);
      return initiateAuthResponse;
    } catch(error) {
      return error;
    }

  } else {
    const initiateAuthInput = {
      AuthFlow: "USER_PASSWORD_AUTH",
      ClientId: process.env.CLIENT_ID,
      AuthParameters: {
        USERNAME: username,
        PASSWORD: password
      }
    };
    
    const initiateAuthCommand = new InitiateAuthCommand(initiateAuthInput);
    try {
      const initiateAuthResponse = await cognitoIdentityProviderClient.send(initiateAuthCommand);

      // After we have the Auth response, get the user info to return Email to Unreal
      const getUserInput = {
        AccessToken: initiateAuthResponse.AuthenticationResult.AccessToken
      };

      const getUserCommand = new GetUserCommand(getUserInput);
      const getUserResponse = await cognitoIdentityProviderClient.send(getUserCommand);

      let emailAttribute;
      for (const attribute of getUserResponse.UserAttributes) {
        if (attribute.Name === "email") {
          emailAttribute = attribute;
          break;
        }
      }

      const response = {
        ...initiateAuthResponse,
        email: emailAttribute.Value,
      };

      return response;

    } catch(error) {
      return error;
    }
  }
};